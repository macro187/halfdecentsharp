// -----------------------------------------------------------------------------
// Copyright (c) 2009
// Ron MacNeil <macro187 AT users DOT sourceforge DOT net>
//
// Permission to use, copy, modify, and distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
// -----------------------------------------------------------------------------


using SCG = System.Collections.Generic;
using System;
using Com.Halfdecent;
using Com.Halfdecent.Meta;
using Com.Halfdecent.RTypes;
using Com.Halfdecent.Numerics;
using Com.Halfdecent.Streams;
using Com.Halfdecent.Filters;


namespace
Com.Halfdecent.Collections
{


// =============================================================================
// TODO
// =============================================================================

public abstract class
OrderedCollectionBase<
    T
>
    : IOrderedCollectionCSG< T >
    // TODO more
{



// -----------------------------------------------------------------------------
// IOrderedCollection< T >
// IOrderedCollectionC< T >
// IOrderedCollectionS< T >
// IOrderedCollectionG< T >
// -----------------------------------------------------------------------------



// -----------------------------------------------------------------------------
// IUniqueKeyedCollection< IInteger, T >
// -----------------------------------------------------------------------------

public abstract
    T
Get(
    IInteger key
);



// -----------------------------------------------------------------------------
// IUniqueKeyedCollectionC< IInteger, T >
// -----------------------------------------------------------------------------

public abstract
    void
Replace(
    IInteger    key,
    T           replacement
);



// -----------------------------------------------------------------------------
// IUniqueKeyedCollectionS< IInteger, T >
// -----------------------------------------------------------------------------

public abstract
    void
Remove(
    IInteger key
);



// -----------------------------------------------------------------------------
// IUniqueKeyedCollectionG< IInteger, T >
// -----------------------------------------------------------------------------



// -----------------------------------------------------------------------------
// IKeyedCollection< IInteger, T >
// -----------------------------------------------------------------------------

public
    IStream< IInteger >
StreamKeys()
{
    return this.StreamKeysIterator().AsStream();
}

private
    SCG.IEnumerator< TKey >
StreamKeysIterator()
{
    for(
        IInteger i = Integer.From( 0 );
        i.LTE( this.Count);
        i = i.Plus( Integer.From( 1 ) )
    )
        yield return i;

}


public abstract
    bool
Contains(
    IInteger key
)
{
    new NonNull().Require( key, new Parameter( "key" ) );
    return !(
        key.LT( Integer.From( 0 ) ) ||
        key.GTE( this.Count ) );
}


public
    IStream< T >
GetAll(
    IInteger key
)
{
    if( this.Contains( key ) )
        return new Stream< T >( this.Get( key ) );
    else
        return new Stream< T >();
}



// -----------------------------------------------------------------------------
// IKeyedCollectionC< IInteger, T >
// -----------------------------------------------------------------------------

public
    IFilter< T, T >
GetAndReplaceAll(
    IInteger key
)
{
    return new Filter< T, T >(
        ( get, put, drop ) =>
            this.GetAndReplaceAllFilter( col, key, get, put, drop ) );
}

private
    SCG.IEnumerator< bool >
GetAndReplaceAllFilter(
    TKey            key,
    Func< T >       get,
    Action< T >     put,
    Action< T >     drop
)
{
    if( !this.Contains( key ) ) yield break;
    T item = this.Get( key );
    yield return false;
    this.Replace( key, get() );
    put( item );
    yield return true;
}



// -----------------------------------------------------------------------------
// IKeyedCollectionS< IInteger, T >
// -----------------------------------------------------------------------------

public
    IStream< T >
GetAndRemoveAll(
    IInteger key
)
{
    return
        this.GetAndRemoveAllIterator( key )
        .AsStream();
}

private
    SCG.IEnumerator< T >
GetAndRemoveAllIterator(
    TKey key
)
{
    if( this.Contains( key ) ) {
        T item = this.Get( key );
        this.Remove( key );
        yield return item;
    }
}



// -----------------------------------------------------------------------------
// IKeyedCollectionG< IInteger, T >
// -----------------------------------------------------------------------------

public abstract
    void
Add(
    IInteger    key,
    T           item
);



// -----------------------------------------------------------------------------
// ICollection< ITuple< IInteger, T > >
// -----------------------------------------------------------------------------

public abstract
IInteger
Count
{
    get;
}


    IStream< ITuple< IInteger, T > >
ICollection< ITuple< IInteger, T > >.Stream()
{
    return
        this.StreamKeys()
        .AsEnumerable()
        .Select( k => new Tuple( k, this.Get( k ) ) )
        .AsStream();
}



// -----------------------------------------------------------------------------
// ICollectionC< ITuple< IInteger, T > >
// -----------------------------------------------------------------------------

/// (See <tt>ICollectionC< T >.GetAndReplaceAll()</tt>)
///
/// Replacement keys are ignored.  Replacements are added under the same key as
/// the items they replace.
///
/// Avoids replacing any given key more than once.
///
/// Semantically correct, but not very efficient.  Restarts item iteration when
/// an item is replaced, re-considering unreplaced items each time.
///
public
    IFilter< ITuple< IInteger, T >, ITuple< IInteger, T > >
GetAndReplaceAll(
    Func< ITuple< IInteger, T >, bool > where
)
{
    new NonNull().Require( where, new Parameter( "where" ) );
    return
        new Filter< ITuple< TKey, T >, ITuple< TKey, T > >(
            ( get, put, drop ) =>
                this.TupleGetAndReplaceAllFilter( where, get, put, drop ) );
}

private
    SCG.IEnumerator< bool >
TupleGetAndReplaceAllFilter(
    Func< ITuple< TKey, T >, bool > where,
    Func< ITuple< TKey, T > >       get,
    Action< ITuple< TKey, T > >     put,
    Action< ITuple< TKey, T > >     drop
)
{
    SCG.ICollection< TKey > replacedkeys = new SCG.HashSet< TKey >();
    while( true ) {
        IStream< ITuple< TKey, T > > pairs =
            ((ICollection< ITuple< TKey, T > >)( this )).Stream();
        while( true ) {
            ITuple< TKey, T > t;
            if( !pairs.TryPull( out t ) ) yield break;
            if( replacedkeys.Contains( t.A ) ) continue;
            if( where( t ) ) {
                yield return false;
                ITuple< TKey, T > t2 = get();
                this.Replace( t.A, t2.B );
                replacedkeys.Add( t.A );
                put( t );
                yield return true;
                break;
            }
        }
    }
}


// -----------------------------------------------------------------------------
// ICollectionS< ITuple< IInteger, T > >
// -----------------------------------------------------------------------------

public
    IStream< ITuple< IInteger, T > >
GetAndRemoveAll(
    Func< ITuple< IInteger, T >, bool > where
)
{
    new NonNull().Require( where, new Parameter( "where" ) );
    return
        this.GetAndRemoveAllIterator( where )
        .AsStream();
}

private
    SCG.IEnumerator< ITuple< TKey, T > >
GetAndRemoveAllIterator(
    Func< ITuple< TKey, T >, bool > where
)
{
    while( true ) {
        IStream< ITuple< TKey, T > > pairs =
            ((ICollection< ITuple< TKey, T > >)( this )).Stream();
        while( true ) {
            ITuple< TKey, T > t;
            if( !pairs.TryPull( out t ) ) yield break;
            if( where( t ) ) {
                this.Remove( t.A );
                yield return t;
                break;
            }
        }
    }
}



// -----------------------------------------------------------------------------
// ICollectionG< ITuple< IInteger, T > >
// -----------------------------------------------------------------------------

public
    void
Add(
    ITuple< IInteger, T > item
)
{
    new NonNull().Require( item, new Parameter( "item" ) );
    this.Add( item.A, item.B );
}



// -----------------------------------------------------------------------------
// ICollection< T >
// -----------------------------------------------------------------------------

public
    IStream< T >
Stream()
{
    return
        Collection.StreamViaTupleCollection<
            //CollectionFromSystemListAdapter< T >,
            IInteger,
            T
        >( this );
}



// -----------------------------------------------------------------------------
// ICollectionC< T >
// -----------------------------------------------------------------------------

public
    IFilter< T, T >
GetAndReplaceAll(
    Func< T, bool > where
)
{
    // TODO canned
    new NonNull().Require( where, new Parameter( "where" ) );
    return new Filter< T, T >(
        ( get, set, drop ) =>
            this.GetAndReplaceAllFilter( where, get, set, drop ) );
}


private
    SCG.IEnumerator< bool >
GetAndReplaceAllFilter(
    Func< T, bool > where,
    Func< T >       get,
    Action< T >     put,
    Action< T >     drop
)
{
    for( int i = 0; i < this.List.Count; i++ ) {
        T item = this.List[ i ];
        if( !where( item ) ) continue;
        yield return false;
        this.List[ i ] = get();
        put( item );
        yield return true;
    }
}



// -----------------------------------------------------------------------------
// ICollectionS< T >
// -----------------------------------------------------------------------------

public
    IStream< T >
GetAndRemoveAll(
    Func< T, bool > where
)
{
    // TODO canned
    return
        this.GetAndRemoveAllStream( where )
        .AsStream();
}


private
    SCG.IEnumerable< T >
GetAndRemoveAllStream(
    Func< T, bool > where
)
{
    for( int i = this.List.Count-1; i >= 0; i-- ) {
        T item = this.List[ i ];
        if( !where( item ) ) continue;
        this.List.RemoveAt( i );
        yield return item;
    }
}



// -----------------------------------------------------------------------------
// ICollectionG< T >
// -----------------------------------------------------------------------------

public
    void
Add(
    T item
)
{
    this.List.Add( item );
}




//private static Com.Halfdecent.Globalisation.Localised< string > _S( string s, params object[] args ) { return Com.Halfdecent.Resources.Resource._S( global::System.Reflection.MethodInfo.GetCurrentMethod().DeclaringType, s, args ); }

} // type
} // namespace

